{"version":3,"sources":["components/Cell.jsx","components/Board.jsx","App.js","index.js"],"names":["Cell","clearState","index","state","setstate","step","setstep","winCombs","Defend","position","defended","arr","Math","floor","random","length","map","comb","countX","c","BestMove","newArrO","newArrX","i","countO","j","Set","ArrOf1","ArrOf2","o","blockIndex","O","x","randomPosition","ArrofLast","forEach","X","className","onClick","attacked","some","AiMove","setTimeout","Board","useState","Array","fill","every","val","alert","cell","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be61db15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = ({ clearState, index, state, setstate, step, setstep, winCombs }) => {\r\n  const AiMove = () => {\r\n    let attacked = false;\r\n    winCombs.some(comb => {\r\n      let countO = 0;\r\n      comb.forEach(c => {\r\n        if (state[c] === \"O\") {\r\n          ++countO;\r\n          if (countO === 2) {\r\n            comb.some(c => {\r\n              if (state[c] === null) {\r\n                state[c] = \"O\";\r\n                attacked = true;\r\n              }\r\n              return attacked;\r\n            });\r\n          }\r\n        }\r\n      });\r\n      return attacked;\r\n    });\r\n    if (!attacked) {\r\n      Defend();\r\n    }\r\n    setstate(() => {\r\n      let newState = [...state];\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const Defend = () => {\r\n    let position;\r\n    let defended = false;\r\n    if (\r\n      (step === 1 && index === 0) ||\r\n      (step === 1 && index === 2) ||\r\n      (step === 1 && index === 6) ||\r\n      (step === 1 && index === 8)\r\n    ) {\r\n      position = 4;\r\n    } else if (step === 1 && index === 4) {\r\n      let arr = [0, 2, 6, 8];\r\n      position = arr[Math.floor(Math.random() * arr.length)];\r\n    }\r\n    if (step === 1 && index % 2 === 1) {\r\n      position = 4;\r\n    }\r\n    if (step === 1 && state[position] === null && state[position] !== \"X\") {\r\n      state[position] = \"O\";\r\n    }\r\n\r\n    winCombs.map(comb => {\r\n      let countX = 0;\r\n      comb.map(c => {\r\n        if (state[c] === \"X\") {\r\n          ++countX;\r\n          if (countX === 2) {\r\n            comb.map(c => {\r\n              if (state[c] === null) {\r\n                state[c] = \"O\";\r\n                defended = true;\r\n              }\r\n              return c;\r\n            });\r\n          }\r\n        }\r\n        return defended;\r\n      });\r\n      return comb;\r\n    });\r\n    if (!defended) {\r\n      BestMove();\r\n    }\r\n  };\r\n\r\n  const BestMove = () => {\r\n    let newArrO = [];\r\n    let newArrX = [];\r\n    for (var i = 0; i < winCombs.length; i++) {\r\n      let countX = 0;\r\n      let countO = 0;\r\n      var comb = winCombs[i];\r\n      for (var j = 0; j < comb.length; j++) {\r\n        var c = comb[j];\r\n        if (state[c] === \"O\") {\r\n          countO++;\r\n        }\r\n        if (state[c] === \"X\") {\r\n          countX++;\r\n        }\r\n      }\r\n      if (countO === 1 && countX === 0) {\r\n        newArrO = [...newArrO, ...new Set(comb)];\r\n      }\r\n      if (countX === 1 && countO === 0) {\r\n        newArrX = [...newArrX, ...new Set(comb)];\r\n      }\r\n    }\r\n\r\n    let ArrOf1 = [];\r\n    let ArrOf2 = [];\r\n\r\n    for (let o = 0; o < newArrO.length; o++) {\r\n      let blockIndex = 0;\r\n      let O = newArrO[o];\r\n      for (let x = 0; x < newArrX.length; x++) {\r\n        let X = newArrX[x];\r\n        if (O === X) {\r\n          ++blockIndex;\r\n        }\r\n      }\r\n      if (blockIndex === 2) {\r\n        ArrOf2 = [...ArrOf2, O];\r\n      }\r\n      if (blockIndex === 1) {\r\n        ArrOf1 = [...ArrOf1, O];\r\n      }\r\n\r\n      if (step > 1 && ArrOf2.length === 1 && ArrOf1.length < 4 && blockIndex > 1 && state[O] === null) {\r\n        state[O] = \"O\";\r\n      } else if (step > 2 && ArrOf1.length === 2 && blockIndex < 2 && state[O] === null) {\r\n        let position = ArrOf1[0];\r\n        state[position] = \"O\";\r\n      } else if (blockIndex === 1 && ArrOf1.length === 4 && step === 2 && state[O] === null) {\r\n        const randomPosition = ArrOf1[Math.floor(Math.random() * ArrOf1.length)];\r\n        state[randomPosition] = \"O\";\r\n      }\r\n    }\r\n    if (newArrO.length === 0 && step > 3) {\r\n      let ArrofLast = [];\r\n      newArrX.forEach(X => {\r\n        if (state[X] === null) {\r\n          ArrofLast = [...ArrofLast, X];\r\n        }\r\n      });\r\n      let position = ArrofLast[Math.floor(Math.random() * ArrofLast.length)];\r\n      state[position] = \"O\";\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!state[index]) {\r\n      setstep(() => {\r\n        ++step;\r\n        AiMove();\r\n        setTimeout(() => {\r\n          clearState();\r\n        }, 0);\r\n        return step;\r\n      });\r\n      setstate(() => {\r\n        state[index] = \"X\";\r\n        let newState = [...state];\r\n        return newState;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='cell' onClick={handleClick}>\r\n      <h1>{state[index]}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { useState } from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nfunction Board() {\r\n  const [state, setstate] = useState(Array(9).fill(null));\r\n  const [step, setstep] = useState(0);\r\n  const winCombs = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const clearState = () => {\r\n    if (state.every(val => val !== null)) {\r\n      alert(\"Tie\");\r\n      setstate(() => {\r\n        let newState = Array(9).fill(null);\r\n        return newState;\r\n      });\r\n      setstep(0);\r\n    }\r\n\r\n    winCombs.forEach(comb => {\r\n      let countO = 0;\r\n      comb.forEach(c => {\r\n        if (state[c] === \"O\") {\r\n          ++countO;\r\n          if (countO === 3) {\r\n            alert(\"You Lose\");\r\n            setstate(() => {\r\n              let newState = Array(9).fill(null);\r\n              return newState;\r\n            });\r\n            setstep(0);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='board'>\r\n      {state.map((cell, index) => (\r\n        <Cell\r\n          key={index}\r\n          index={index}\r\n          state={state}\r\n          setstate={setstate}\r\n          step={step}\r\n          setstep={setstep}\r\n          winCombs={winCombs}\r\n          clearState={clearState}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}